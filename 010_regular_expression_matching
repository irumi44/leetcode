/*
'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).
The function prototype should be:
bool isMatch(const char *s, const char *p)
*/

class Solution {
public:
    bool isMatch(std::string s, std::string p) {
        if (s.length() ==0) {
            if (p.length() == 0) return true;
            for (int i = 0;i<p.length();i++) {
                if (i%2 == 0 && i<=p.length() && p[i+1] != '*') return false;
            }
            return true;
        } else if (p.length() == 0) return false;
        
        bool result[s.length()+1][p.length()+1];
        result[0][0] = true;
        for (int i =1;i<=s.length();i++) result[i][0] = false;
        for (int j =1;j<=p.length();j++) {
            if (p[j-1] == '*') {
                result[0][j] = result[0][j-2];
            } else {
                result[0][j] = false;
            }
        }
        
        for (int i =1;i<=s.length();i++) {
            for (int j =1;j<=p.length();j++) {
                if (s[i-1] == p[j-1] || p[j-1] == '.') {
                    result[i][j] = result[i-1][j-1];
                } else if (p[j-1] == '*') {
                    if (p[j-2] == s[i-1] || p[j-2] == '.') {
                        result[i][j] = result[i-1][j] || result[i][j-2] || result[i][j-1];
                    } else {
                        result[i][j] = result[i][j-2];
                    }
                } else {
                    result[i][j] = false;
                }
            }
        }
    
        return result[s.length()][p.length()];
            }
};
