/*
There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
*/
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        //std::vector<int> combined;
        int i1=0;
        int i2=0;
        int m = int(nums1.size());
        int n = int(nums2.size());
        int i = 0;
        int j = 0;
        bool penultimate_i = false;
        bool last_i = false;
        bool sodd = (m+n) % 2 ==1;
        int while_end = sodd? (m+n+1) / 2 : (m+n) / 2 + 1;
        while(i + j < while_end) {
            if ((n > 0 ) && (j!=n) && (i == m || nums1[i] >= nums2[j])) {
                j++;
                if (i+j == while_end) last_i = false;
                else if (i+j == while_end -1) penultimate_i = false;
                
                //combined.push_back(nums2[j++]);
            } else if (m > 0) {
                i++;
                if (i+j == while_end) last_i = true;
                else if (i+j == while_end -1) penultimate_i = true;
                //combined.push_back(nums1[i++]);
            }
        }
        if (m+n == 0) {
            return 0;
        }else if (sodd) {
            return last_i?nums1[i-1]:nums2[j-1];
            //return combined[(m+n-1) / 2];
        } else {
            if (last_i) {
                if (penultimate_i) {
                 return ((double)nums1[i-1] + (double)nums1[i-2]) / 2;   
                }else{
                    return ((double)nums1[i-1] + (double)nums2[j-1]) / 2;
                }
            } else {
                if (penultimate_i) {
                    return ((double)nums2[j-1] + (double)nums1[i-1]) / 2;
                }else{
                    return ((double)nums2[j-1] + (double)nums2[j-2]) / 2;
                }
            }
                        //return ((double)combined[(m+n) / 2 - 1] + (double)combined[(m+n) / 2]) / 2;
        }
    }
};
