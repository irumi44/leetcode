/*
You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.

For example, given:
s: "barfoothefoobarman"
words: ["foo", "bar"]

You should return the indices: [0,9].
*/
class Solution {
public:
    std::vector<int> findSubstring(std::string s, std::vector<std::string>& words) {
        
        std::vector<int> ret;
        if (words.size()==0 || s.length()==0) return ret;
        const int lent = (int)words[0].length();
        const int nums = (int)words.size();
        std::unordered_map<std::string, int > uni_words;
        std::unordered_map<std::string, int > uni_cp;
        for (std::vector<std::string>::iterator it = words.begin();it!=words.end();it++)
            uni_words[*it] +=1;
        
        for (int i = 0;i<s.length();i++) {
            uni_cp = uni_words;
            
            for (int j =0;j<nums;j++) {
                std::string scheck = s.substr(i+j*lent, lent);
                //std::cout<<scheck<<"\t"<<i<<"\t"<<j<<std::endl;;
                if (uni_cp.find(scheck) == uni_cp.end()) break;
                if (j==nums-1) {
                    ret.push_back(i);
                    break;
                }
                if (--uni_cp[scheck] ==0) uni_cp.erase(scheck);
            }
        }
        //std::cout << float( clock () - begin_time ) /  CLOCKS_PER_SEC<< std::endl;
        return ret;
    }
};

