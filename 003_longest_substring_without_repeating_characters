/*
Given a string, find the length of the longest substring without repeating characters.
*/

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
       if (s.length() == 0) return 0;
        int ret = 1;
        std::map<char,int> m1;
        int iHead = 0;
        m1.insert(std::pair<char,int>(s[0], 0));
        for (int i = 1; i<s.length();++i) {
            char insert_char = s[i];
            std::map<char,int>::iterator it = m1.find(insert_char);
            if (it != m1.end()) {
                if (it->second >= iHead) iHead = it->second + 1;
                it->second = i;
            } else m1.insert(std::pair<char,int>(insert_char, i));
            if ((i-iHead + 1) > ret) ret = i-iHead + 1;
            else if ((ret - (i-iHead + 1)) > s.length() - i - 2) break;
        }
        return ret;
        

    }
};
