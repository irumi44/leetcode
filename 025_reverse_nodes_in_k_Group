/*Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.*/

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        // 1->2->3->4->5
        // 3->2->1->4->5
        if (!head) return head;
        ListNode* end = head;
        if (!cando(k, head)) return head;
        for (int i = 0;i<k-1;i++) swapnode(&head, &end);
        ListNode* ret = head;
        
        while (end->next) {
        	ListNode* temp = end;
        	head = end->next;
			end = end->next;
			if (!cando(k, head)) break;
        	for (int i = 0;i<k-1;i++) swapnode(&head, &end);
			temp->next = head;
		}
        
        return ret;
        
    }
    
    void swapnode(ListNode** begin, ListNode** end) {
    	
    	if (!(*end)->next) return;
    	if (!(*end)->next->next) {
    		(*end)->next->next = *begin;
    		(*begin) = (*end)->next;
    		(*end)->next = NULL;
    	} else {
			ListNode* temp = (*end)->next->next;
    		(*end)->next->next = *begin;
    		(*begin) = (*end)->next;
    		(*end)->next = temp;
		}     	
	}
	bool cando(int k, ListNode* head) {
		
		for (int i = 0;i<k;i++) {
			if (!head) return false;
			head = head->next;
		}
		return true;
	}
};
